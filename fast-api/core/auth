from functools import wraps
from typing import Type

from fastapi import Depends, HTTPException, Security
from fastapi.security import APIKeyHeader
from pydantic import BaseModel

api_key_header = APIKeyHeader(name="API-Key")

API_KEYS = {
    "my_api_key": ["test"],
    "testing-api-key-1": ["test"],
    "testing-api-key-2": [],
}


def get_api_key(api_key: str = Security(api_key_header)) -> str:
    """Checks if the API key exists in our API_KEYS dictionary"""
    if api_key is None or api_key not in API_KEYS:
        raise HTTPException(status_code=401, detail="Invalid or Missing API Key")
    return api_key


def set_scope(permissions: list, model: Type[BaseModel]):
    """Checks if the API key has the required permissions to access the endpoint"""

    def decorator(func):
        @wraps(func)
        def wrapper(payload: model, api_key: str = Depends(get_api_key)):
            if not set(permissions).issubset(set(API_KEYS[api_key])):
                raise HTTPException(status_code=403, detail="Permission denied")
            return func(payload, api_key)

        return wrapper

    return decorator
